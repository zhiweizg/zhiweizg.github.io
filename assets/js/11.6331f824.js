(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{410:function(a,e,t){"use strict";t.r(e);var s=t(56),l=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"select-中的-defaultvalue-动态绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select-中的-defaultvalue-动态绑定"}},[a._v("#")]),a._v(" Select 中的 defaultValue 动态绑定")]),a._v(" "),t("ul",[t("li",[a._v("defaultValue 只能在第一次的时候赋值并保存，再之后赋值也不改变")]),a._v(" "),t("li",[a._v("动态绑定用一个 key 值去绑定 defaulyValue 中的值，每次重新赋值的话可以更新默认值")])]),a._v(" "),t("p",[a._v("JavaScript 事件委托")]),a._v(" "),t("p",[a._v("事件委托是，一个事件理应绑定到相应需要触发的元素上，但却将该事件绑定到其父元素上，利用事件冒泡原理，触发其事件。")]),a._v(" "),t("p",[a._v("使用方法：现页面上有一个 ul，ul 下有多个 li，给 ul 绑定一个点击事件，每个 li 给定一个标识，当点击 li 时，会触发 ul 的点击，ul 能够获取到 li 的下标，根据每个 li 的下标进行不同的事件执行。")]),a._v(" "),t("h4",{attrs:{id:"react-的-onclick"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-的-onclick"}},[a._v("#")]),a._v(" React 的 onClick")]),a._v(" "),t("p",[a._v("那么，react 中的 onClick 和 JavaScript 的事件委托有什么关系呢？")]),a._v(" "),t("p",[a._v("使用过或了解过 react 的开发者大概都知道，react 是使用 JSX 的。JSX 把类似 HTML 的标记语言和 JavaScript 混在了一起，那么我们也不难发现，JSX 的点击事件使用 onClick 绑定，而在 HTML 中，使用 onclick 进行绑定。这两个看似是一样的，实则不然。")]),a._v(" "),t("p",[a._v("在 HTML 中直接使用 onclick，其实它添加的事件处理函数是在全局环境下执行的，这污染了全局环境。而且，在一些事件处理比较多的页面中，很多 DOM 元素都会添加 onclick 事件，可能会影响网页的性能。最后，对于使用 onclick 的 DOM 元素，如果要动态地从 DOM 树种删除，需要把对应的事件处理器注销，若忘了注销，可能会造成内存泄漏。")]),a._v(" "),t("p",[a._v("以上是在 HTML 中使用 onclick 的弊端，但是在 JSX 中使用 onClick 并不存在这些问题，因为这两者有着本质的区别。我们知道，react 做出来的页面实则是单页面应用。单页面应用的所有一切都是组件，那么 onClick 挂载的每个函数，都不会污染全局，可以控制在当前的组件中。另外，虽然 JSX 的 onClick 和 HTML 中的 onclick 看起来差不多，但是它并没有产生直接使用 onclick 的 HTML，而是使用了时间委托的方式处理点击事件，无论有多少个 onClick，最后渲染时，都只是在 DOM 树上添加了一个事件处理函数，挂载在第一级的 DOM 节点上。而且，由于 react 的生命周期，在组件 unmount 阶段，挂载的事件都会被清除。")]),a._v(" "),t("p",[a._v("以上。")]),a._v(" "),t("h4",{attrs:{id:"react-的父子传值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-的父子传值"}},[a._v("#")]),a._v(" React 的父子传值")]),a._v(" "),t("p",[a._v("父组件中对应子组件的标签"),t("code",[a._v("<child value = {value} visable = {visable} setVisable = {setVisbale} \\>")]),a._v("进行传值")]),a._v(" "),t("p",[a._v("子组件中的函数")]),a._v(" "),t("p",[t("code",[a._v("function child(props){ const {value,visable,setVisable} = props }")])]),a._v(" "),t("p",[a._v("子向父组件传值")]),a._v(" "),t("p",[a._v("父组件需定义一个 "),t("code",[a._v("const [visable,setVisable] = useState<boolean>(true)")])]),a._v(" "),t("p",[a._v("通过父组件传过来并且解构出来的 setVisable 进行赋值，比如 setVisable(false）")]),a._v(" "),t("h4",{attrs:{id:"对比两个数组相同的值-并取出不同值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对比两个数组相同的值-并取出不同值"}},[a._v("#")]),a._v(" 对比两个数组相同的值，并取出不同值")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr1 = [1,2,3,4,5]\nlet arr2 = [2,4,6]\n\narr1.filter((item:number) => {\n\treturn arr2.findIndex((data:number) => data ===item ) === -1\n}).map((num:number) => {\n\treturn num\n})\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("h4",{attrs:{id:"react-将-ant-组件中的弹窗或者抽屉关闭或开以后清空值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-将-ant-组件中的弹窗或者抽屉关闭或开以后清空值"}},[a._v("#")]),a._v(" React 将 ant 组件中的弹窗或者抽屉关闭或开以后清空值")]),a._v(" "),t("p",[t("code",[a._v("{visible ? ( <Drawer /> ):null}")])]),a._v(" "),t("h4",{attrs:{id:"hook-中的-useref"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hook-中的-useref"}},[a._v("#")]),a._v(" hook 中的 useRef()")]),a._v(" "),t("p",[a._v("useRef 绑定一个标签")]),a._v(" "),t("p",[a._v("可以获得 input 中的值")])])}),[],!1,null,null,null);e.default=l.exports}}]);